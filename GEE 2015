function maskL457sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  return image.addBands(opticalBands, null, true)
              .addBands(thermalBand, null, true)
              .updateMask(qaMask)
              .updateMask(saturationMask);
}

var composite = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .map(maskL457sr)
  .filterDate('2015-05-01', '2015-10-31')
  .filterBounds(aoi);

// Visualisasi komposit
var citra = composite.median().clip(aoi);
Map.addLayer(citra, {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 0, max: 0.3}, 'True color');
Map.addLayer(citra, {bands: ['SR_B5', 'SR_B4', 'SR_B3'], min: 0, max: 0.3}, 'Komposit 543');
Map.addLayer(citra, {bands: ['SR_B5', 'SR_B6', 'SR_B4'], min: 0, max: 0.3}, 'Komposit 564');
Map.addLayer(citra, {bands: ['SR_B6', 'SR_B5', 'SR_B4'], min: 0, max: 0.3}, 'Komposit 654');
Map.centerObject(aoi, 10);

// Indeks MNDWI, NDVI, NDBI
var mndwi = citra.expression(
  '(green - swir) / (green + swir)', {
    'green': citra.select('SR_B3'),
    'swir': citra.select('SR_B6')
}).rename('mndwi');

var ndvi = citra.expression(
  '(nir - red) / (nir + red)', {
    'nir': citra.select('SR_B5'),
    'red': citra.select('SR_B4')
}).rename('ndvi');

var ndbi = citra.expression(
  '(swir - nir) / (swir + nir)', {
    'swir': citra.select('SR_B6'),
    'nir': citra.select('SR_B5')
}).rename('ndbi');

var citra = citra.addBands([mndwi, ndbi, ndvi]);
print('Band Names:', citra.bandNames());

var ndviParams = {
  min: -1.0,
  max: 1.0,
  palette: [
    '#0000FF', '#FFFF00', '#A8E600', '#4CC200', '#008800', '#004400'
  ]
};

var mndwiParams = {
  min: -1.0,
  max: 1.0,
  palette: [
    '#E0F6FF', '#A0C8FF','#5090FF', '#2060FF', '#0030A0'
  ]
};
var ndbiParams = {
  min: -1.0,
  max: 1.0,
  palette: [
    '#FFEBE5', '#F4A58D', '#E75B3A', '#C81E1E', '#700000'
  ]
};

Map.setCenter(110.63, -6.89, 10);
Map.addLayer(ndvi, ndviParams, 'NDVI');
Map.addLayer(mndwi, mndwiParams, 'MNDWI');
Map.addLayer(ndbi, ndbiParams, 'NDBI');

// Membuat legenda indeks
function addLegend(title, palette, min, max) {
  var legend = ui.Panel({
    style: {
      position: 'bottom-left',
      padding: '8px 15px'
    }
  });

  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '14px',
      margin: '0 0 6px 0',
      padding: '0'
    }
  });

  var makeColorBar = function(palette) {
    return ui.Thumbnail({
      image: ee.Image.pixelLonLat().select(0).multiply((max - min) / 100.0).add(min)
              .visualize({min: min, max: max, palette: palette}),
      params: {bbox: [0, 0, 100, 10], dimensions: '100x10'},
      style: {stretch: 'horizontal', margin: '0px 0 6px 0', maxHeight: '20px'}
    });
  };

  var legendLabels = ui.Panel({
    widgets: [
      ui.Label(min.toString(), {margin: '4px 8px', fontSize: '10px'}),
      ui.Label((max / 2).toFixed(1), {margin: '4px 8px', fontSize: '10px', textAlign: 'center', stretch: 'horizontal'}),
      ui.Label(max.toString(), {margin: '4px 8px', fontSize: '10px', textAlign: 'right'})
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });

  legend.add(legendTitle);
  legend.add(makeColorBar(palette));
  legend.add(legendLabels);

  Map.add(legend);
}

addLegend('NDVI', ndviParams.palette, ndviParams.min, ndviParams.max);
addLegend('MNDWI', mndwiParams.palette, mndwiParams.min, mndwiParams.max);
addLegend('NDBI', ndbiParams.palette, ndbiParams.min, ndbiParams.max);

// Menggabungkan kelas lahan basah
var kelas = laut.merge(mangrove).merge(sungai).merge(rawa).merge(tambak).merge(sawah).merge(waduk).merge(lterbangun).merge(lterbuka).merge(hutan).merge(kebun);
Map.centerObject(kelas, 11);

var bands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'mndwi', 'ndbi', 'ndvi'];

// Membuat variabel untuk menyimpan training
var training = citra.select(bands).sampleRegions({
  collection: kelas,
  properties: ['Kelas'],
  scale: 30
});

// Membuat data training dan testing
var trainingWithRandom = training.randomColumn('random');
var trainingProportion = 0.7;
var testingProportion = 0.3;
var training70 = trainingWithRandom.filter(ee.Filter.lt('random', trainingProportion));
var testing30 = trainingWithRandom.filter(ee.Filter.gte('random', trainingProportion));

// Klasifikasi CART
var classifierCART = ee.Classifier.smileCart(null,1).train({
  features: training70,
  classProperty: 'Kelas',
  inputProperties: bands
});
var classifiedCART = citra.select(bands).classify(classifierCART);

// Klasifikasi KNN
var classifierKNN = ee.Classifier.smileKNN(1, "AUTO", "EUCLIDEAN").train({
  features: training70,
  classProperty: 'Kelas',
  inputProperties: bands
});
var classifiedKNN = citra.select(bands).classify(classifierKNN);

// lasifikasi Naive Bayes
var classifierNB = ee.Classifier.smileNaiveBayes(1).train({
  features: training70,
  classProperty: 'Kelas',
  inputProperties: bands
});

var classifiedNB = citra.select(bands).classify(classifierNB);

// Klasifikasi SVM
var classifierSVM = ee.Classifier.libsvm("Voting","C_SVC","LINEAR",true, null, null, null, null, null,null, null, null).train({
  features: training70,
  classProperty: 'Kelas',
  inputProperties: bands
});
var classifiedSVM = citra.select(bands).classify(classifierSVM);

// Visualisasi hasil klasifikasi
var classVisParams = {
  min: 0,
  max: 12,
  palette: ['1f78b4', '33a02c', 'e31a1c', 'ff7f00', '6a3d9a', 'b15928', 'a6cee3', 'b2df8a', 'fb9a99', 'fdbf6f', 'cab2d6', 'ffff99',  '8dd3c7' ]
};

Map.addLayer(classifiedCART, classVisParams, 'CART Classification');
Map.addLayer(classifiedKNN, classVisParams, 'kNN Classification');
Map.addLayer(classifiedNB, classVisParams, 'Naive Bayes Classification');
Map.addLayer(classifiedSVM, classVisParams, 'SVM Classification');

// Majority
var kernel = ee.Kernel.gaussian(10, 1, "pixels");
function applyMajorityFilter(image) {
  return image.reduceNeighborhood({
    reducer: ee.Reducer.mode(),
    kernel: kernel
  });
}

var majorityCART = applyMajorityFilter(classifiedCART).rename('majority_CART');
var majorityKNN = applyMajorityFilter(classifiedKNN).rename('majority_KNN');
var majorityNB = applyMajorityFilter(classifiedNB).rename('majority_NB');
var majoritySVM = applyMajorityFilter(classifiedSVM).rename('majority_SVM');

Map.addLayer(majorityCART, classVisParams, 'Majority CART');
Map.addLayer(majorityKNN, classVisParams, 'Majority kNN');
Map.addLayer(majorityNB, classVisParams, 'Majority Naive Bayes');
Map.addLayer(majoritySVM, classVisParams, 'Majority SVM');

// Majority CART
var testCART = testing30.classify(classifierCART);
var testCART_cm = testCART.errorMatrix('Kelas', 'classification');
print('CART Testing Confusion Matrix:', testCART_cm);
print('CART Testing Accuracy:', testCART_cm.accuracy());

// Majority kNN
var testKNN = testing30.classify(classifierKNN);
var testKNN_cm = testKNN.errorMatrix('Kelas', 'classification');
print('kNN Testing Confusion Matrix:', testKNN_cm);
print('kNN Testing Accuracy:', testKNN_cm.accuracy());

// Majority Naive Bayes
var testNB = testing30.classify(classifierNB);
var testNB_cm = testNB.errorMatrix('Kelas', 'classification');
print('Naive Bayes Testing Confusion Matrix:', testNB_cm);
print('Naive Bayes Testing Accuracy:', testNB_cm.accuracy());

// Majority SVM
var testSVM = testing30.classify(classifierSVM);
var testSVM_cm = testSVM.errorMatrix('Kelas', 'classification');
print('SVM Testing Confusion Matrix:', testSVM_cm);
print('SVM Testing Accuracy:', testSVM_cm.accuracy());

// Ekspor feature collection
Export.table.toDrive({
  collection: kelas,
  description: '',
  fileFormat: 'GeoJSON',
  fileNamePrefix: 'Kelas_2015',
  folder: 'Exports 2015 kemarau'
});

// Fungsi ekspor
function exportImage(image, description, region, scale) {
  Export.image.toDrive({
    image: image,
    description: description,
    folder: 'Exports 2015 kemarau',
    fileNamePrefix: description,
    region: region,
    scale: scale,
    maxPixels: 1e13,
    fileFormat: 'GeoTIFF'
  });
}

// Ekspor citra 
exportImage(citra, 'Komposit_Median_2015', aoi, 30);

// Ekspor indeks
exportImage(ndvi, 'NDVI_2015', aoi, 30);
exportImage(mndwi, 'MNDWI_2015', aoi, 30);
exportImage(ndbi, 'NDBI_2015', aoi, 30);

// Ekspor hasil klasifikasi
exportImage(classifiedCART, 'Klasifikasi_CART_2015', aoi, 30);
exportImage(classifiedKNN, 'Klasifikasi_kNN_2015', aoi, 30);
exportImage(classifiedNB, 'Klasifikasi_NaiveBayes_2015', aoi, 30);
exportImage(classifiedSVM, 'Klasifikasi_SVM_2015', aoi, 30);

// Ekspor hasil majority
exportImage(majorityKNN, 'Klasifikasi_KNN_Majority_2015_10', aoi, 30);
